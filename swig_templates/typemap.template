/* typemap for handling array of character array output parameter */
%typemap(in, numinputs=0) char *** (char **temp) {
        temp = NULL;
        $1 = &temp;
}

%typemap(argout) char *** {
        /* The purpose of this typemap is to be able to handle out params
           Ex: if the function being called is: rc = foo(char ***)
           then from python you'd call it: o1, o2 = foo() where o2 becomes
           the out parameter*/
        PyObject *o, *o2, *o3;
        o = SWIG_NewPointerObj(SWIG_as_voidptr(*$1), $*1_descriptor, SWIG_POINTER_OWN);
        if ((!$result) || ($result == Py_None))
                $result = o;
        else
        {
                if(!PyTuple_Check($result))
                {
                        /* insert the original result in the tuple */
                        o2 = $result;
                        $result = PyTuple_New(1);
                        PyTuple_SetItem($result, 0, o2);
                }
                o3 = PyTuple_New(1);
                PyTuple_SetItem(o3, 0, o);
                o2 = $result;
                $result = PySequence_Concat(o2, o3);
                Py_DECREF(o2);
                Py_DECREF(o3);
        }
}

/* This input typemap declares that char** requires no input parameter.
 * Instead, the address of a local char* is used to call the function.
 */
%typemap(in,numinputs=0) char** (char* tmp) %{
    tmp = NULL;
    $1 = &tmp;
%}

/* After the function is called, the char** parameter contains a malloc'ed
 * char* pointer.
 * Construct a Python Unicode object (I'm using Python 3) and append it to
 * any existing return value for the wrapper.
 */
%typemap(argout) char** (PyObject* obj) %{
    if (*$1 == NULL)
       goto fail;
    obj = PyUnicode_FromString(*$1);
    $result = SWIG_Python_AppendOutput($result,obj);
%}

/* The malloc'ed pointer is no longer needed, so make sure it is freed. */
%typemap(freearg) char** %{
    if (*$1)
       free(*$1);
%}

/* Allows passing void * to functions. Both this typemap and the one below it
 * work in tandem. The first defines how input void* parameters are
 * handled. We use SWIG_ConvertPtr to take a python object and convert it
 * into a void*. And the out typemap enables functions which return void*
 * to be wrapped into a python object, which can then be used as input
 * into functions which are SWIG wrapped
 */
/*
%typemap(in) void * {
    void **argp = (void **)&$1;
    int res = SWIG_ConvertPtr($input, (void **)argp, $1_descriptor, 0);
    if (!SWIG_IsOK(res)) {
        SWIG_exception_fail(SWIG_ArgError(res), "in method '" "$symname" "', argument " "$argnum"" of type '" "$1_ltype""'");
    }
}
%typemap(out) void * {
    $result = SWIG_NewPointerObj(SWIG_as_voidptr($1), $1_descriptor, 0);
}
*/
